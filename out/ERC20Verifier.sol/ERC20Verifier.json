{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_REQUEST_ID",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedRequests",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "arr",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "getZKPRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "schema",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slotIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operator",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "value",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "circuitId",
              "type": "string"
            }
          ],
          "internalType": "struct ICircuitValidator.CircuitQuery",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "requestQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "schema",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slotIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "operator",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "circuitId",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "requestValidators",
      "outputs": [
        {
          "internalType": "contract ICircuitValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "internalType": "contract ICircuitValidator",
          "name": "validator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "schema",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slotIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operator",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "value",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "circuitId",
              "type": "string"
            }
          ],
          "internalType": "struct ICircuitValidator.CircuitQuery",
          "name": "query",
          "type": "tuple"
        }
      ],
      "name": "setZKPRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        },
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        }
      ],
      "name": "submitZKPResponse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRequests",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6080604052620000126012600a62000201565b6200001f90600562000216565b600c553480156200002f57600080fd5b506040516200252e3803806200252e8339810160408190526200005291620002f5565b81816003620000628382620003ee565b506004620000718282620003ee565b5050506200008e620000886200009660201b60201c565b6200009a565b5050620004ba565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000143578160001904821115620001275762000127620000ec565b808516156200013557918102915b93841c939080029062000107565b509250929050565b6000826200015c57506001620001fb565b816200016b57506000620001fb565b81600181146200018457600281146200018f57620001af565b6001915050620001fb565b60ff841115620001a357620001a3620000ec565b50506001821b620001fb565b5060208310610133831016604e8410600b8410161715620001d4575081810a620001fb565b620001e0838362000102565b8060001904821115620001f757620001f7620000ec565b0290505b92915050565b60006200020f83836200014b565b9392505050565b8082028115828204841417620001fb57620001fb620000ec565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200025857600080fd5b81516001600160401b038082111562000275576200027562000230565b604051601f8301601f19908116603f01168101908282118183101715620002a057620002a062000230565b81604052838152602092508683858801011115620002bd57600080fd5b600091505b83821015620002e15785820183015181830184015290820190620002c2565b600093810190920192909252949350505050565b600080604083850312156200030957600080fd5b82516001600160401b03808211156200032157600080fd5b6200032f8683870162000246565b935060208501519150808211156200034657600080fd5b50620003558582860162000246565b9150509250929050565b600181811c908216806200037457607f821691505b6020821081036200039557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e957600081815260208120601f850160051c81016020861015620003c45750805b601f850160051c820191505b81811015620003e557828155600101620003d0565b5050505b505050565b81516001600160401b038111156200040a576200040a62000230565b62000422816200041b84546200035f565b846200039b565b602080601f8311600181146200045a5760008415620004415750858301515b600019600386901b1c1916600185901b178555620003e5565b600085815260208120601f198616915b828110156200048b578886015182559484019460019091019084016200046a565b5085821015620004aa5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61206480620004ca6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806395d89b41116100de578063b68967e211610097578063dd62ed3e11610071578063dd62ed3e146103d9578063f1435326146103ec578063f2fde38b146103ff578063fee207e61461041257600080fd5b8063b68967e214610386578063c76d084514610399578063cb0e0d7d146103b957600080fd5b806395d89b41146102de57806396bf4741146102e6578063a457c2d714610309578063a87231141461031c578063a9059cbb14610345578063b45c0fdf1461035857600080fd5b806337ba95231161014b5780637042f36b116101255780637042f36b1461029157806370a082311461029a578063715018a6146102c35780638da5cb5b146102cd57600080fd5b806337ba952314610249578063395093511461025e57806363ec508f1461027157600080fd5b806306fdde0314610193578063095ea7b3146101b157806318160ddd146101d457806323b872dd146101e65780632a2d0c47146101f9578063313ce5671461023a575b600080fd5b61019b610425565b6040516101a8919061170a565b60405180910390f35b6101c46101bf366004611739565b6104b7565b60405190151581526020016101a8565b6002545b6040519081526020016101a8565b6101c46101f4366004611765565b6104d1565b6102226102073660046117a6565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a8565b604051601281526020016101a8565b6102516104f5565b6040516101a891906117bf565b6101c461026c366004611739565b61057e565b610279600181565b6040516001600160401b0390911681526020016101a8565b6101d8600c5481565b6101d86102a836600461180c565b6001600160a01b031660009081526020819052604090205490565b6102cb6105a0565b005b6005546001600160a01b0316610222565b61019b6105b4565b6102f96102f4366004611845565b6105c3565b6040516101a89493929190611860565b6101c4610317366004611739565b610676565b61022261032a366004611845565b6008602052600090815260409020546001600160a01b031681565b6101c4610353366004611739565b6106f6565b6101c461036636600461188f565b600660209081526000928352604080842090915290825290205460ff1681565b6101c4610394366004611a23565b610704565b6103ac6103a7366004611845565b610962565b6040516101a89190611b28565b6101d86103c736600461180c565b600b6020526000908152604090205481565b6101d86103e7366004611b88565b610abf565b6102796103fa3660046117a6565b610aea565b6102cb61040d36600461180c565b610b27565b6101c4610420366004611bc1565b610ba0565b60606003805461043490611ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461046090611ce8565b80156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b5050505050905090565b6000336104c5818585610d1e565b60019150505b92915050565b6000336104df858285610e42565b6104ea858585610ebc565b506001949350505050565b606060098054806020026020016040519081016040528092919081815260200182805480156104ad57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b0316815260200190600801906020826007010492830192600103820291508084116105325790505050505050905090565b6000336104c58185856105918383610abf565b61059b9190611d22565b610d1e565b6105a861106b565b6105b260006110c5565b565b60606004805461043490611ce8565b6007602052600090815260409020805460018201546002830154600484018054939492939192916105f390611ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461061f90611ce8565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b5050505050905084565b600033816106848286610abf565b9050838110156106e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6104ea8286868403610d1e565b6000336104c5818585610ebc565b6001600160401b0385166000908152600860205260408120546001600160a01b03166107835760405162461bcd60e51b815260206004820152602860248201527f76616c696461746f72206973206e6f742073657420666f7220746869732072656044820152671c5d595cdd081a5960c21b60648201526084016106e0565b6001600160401b03861660009081526007602052604081205490036107f65760405162461bcd60e51b8152602060048201526024808201527f7175657279206973206e6f742073657420666f722074686973207265717565736044820152631d081a5960e21b60648201526084016106e0565b6001600160401b03861660009081526008602052604090205461082590879087906001600160a01b0316611117565b6001600160401b03861660009081526008602090815260408083205460079092529182902091516319f8754160e21b81526001600160a01b03909116916367e1d5049161087d91899189918991899190600401611de3565b602060405180830381865afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611ed0565b61090a5760405162461bcd60e51b815260206004820152601b60248201527f70726f6f6620726573706f6e7365206973206e6f742076616c6964000000000060448201526064016106e0565b3360009081526006602090815260408083206001600160401b038a1684528252808320805460ff19166001179055600890915290205461095690879087906001600160a01b0316611207565b50600195945050505050565b6109946040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6001600160401b038216600090815260076020908152604091829020825160a081018452815481526001820154818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610a1d57602002820191906000526020600020905b815481526020019060010190808311610a09575b50505050508152602001600482018054610a3690611ce8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6290611ce8565b8015610aaf5780601f10610a8457610100808354040283529160200191610aaf565b820191906000526020600020905b815481529060010190602001808311610a9257829003601f168201915b5050505050815250509050919050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60098181548110610afa57600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b610b2f61106b565b6001600160a01b038116610b945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e0565b610b9d816110c5565b50565b6000610baa61106b565b6001600160401b0384166000908152600860205260409020546001600160a01b0316610c2e57600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af6004820401805460039092166008026101000a6001600160401b0381810219909316928716029190911790555b60608201516001600160401b03851660009081526007602090815260409091208251610c639360039092019290910190611665565b506040808301516001600160401b038616600090815260076020529190912060028101919091556080830151600490910190610c9f9082611f40565b506020808301516001600160401b0386166000908152600790925260409091206001810191909155825181556080830151600490910190610ce09082611f40565b50506001600160401b038316600090815260086020526040902080546001600160a01b0384166001600160a01b031990911617905560019392505050565b6001600160a01b038316610d805760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106e0565b6001600160a01b038216610de15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106e0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610e4e8484610abf565b90506000198114610eb65781811015610ea95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106e0565b610eb68484848403610d1e565b50505050565b6001600160a01b038316610f205760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106e0565b6001600160a01b038216610f825760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106e0565b610f8d83838361136e565b6001600160a01b038316600090815260208190526040902054818110156110055760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106e0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610eb6565b6005546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e0565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061119c83836001600160a01b0316639f442afa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f9190611fff565b8151811061118f5761118f612018565b6020026020010151611413565b9050336001600160a01b03821614610eb65760405162461bcd60e51b815260206004820152602860248201527f6164647265737320696e2070726f6f66206973206e6f7420612073656e646572604482015267206164647265737360c01b60648201526084016106e0565b6001600160401b038316600114801561122d5750336000908152600b6020526040902054155b61128b5760405162461bcd60e51b815260206004820152602960248201527f70726f6f662063616e206e6f74206265207375626d6974746564206d6f7265206044820152687468616e206f6e636560b81b60648201526084016106e0565b600082826001600160a01b0316639f442afa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190611fff565b8151811061130057611300612018565b6020908102919091018101516000818152600a9092526040909120549091506001600160a01b0316610eb65761133833600c54611570565b336000818152600b60209081526040808320859055938252600a90529190912080546001600160a01b0319169091179055505050565b6001600160a01b0382166000908152600660209081526040808320600180855292529091205460ff1615151461140e576040805162461bcd60e51b81526020600482015260248101919091527f6f6e6c79206964656e7469746965732077686f2070726f76696465642070726f60448201527f6f662061726520616c6c6f77656420746f207265636569766520746f6b656e7360648201526084016106e0565b505050565b60006104cb6115696115648460008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b60408277ffffffffffffffff0000000000000000ffffffffffffffff1916901c179050608081901b608082901c179050919050565b61163b565b6014015190565b6001600160a01b0382166115c65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106e0565b6115d26000838361136e565b80600260008282546115e49190611d22565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b8280548282559060005260206000209081019282156116a0579160200282015b828111156116a0578251825591602001919060010190611685565b506116ac9291506116b0565b5090565b5b808211156116ac57600081556001016116b1565b60008151808452602060005b828110156116ec5784810182015186820183015281016116d1565b506000858301820152601f909101601f191690930190920192915050565b60208152600061171d60208301846116c5565b9392505050565b6001600160a01b0381168114610b9d57600080fd5b6000806040838503121561174c57600080fd5b823561175781611724565b946020939093013593505050565b60008060006060848603121561177a57600080fd5b833561178581611724565b9250602084013561179581611724565b929592945050506040919091013590565b6000602082840312156117b857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156118005783516001600160401b0316835292840192918401916001016117db565b50909695505050505050565b60006020828403121561181e57600080fd5b813561171d81611724565b80356001600160401b038116811461184057600080fd5b919050565b60006020828403121561185757600080fd5b61171d82611829565b84815283602082015282604082015260806060820152600061188560808301846116c5565b9695505050505050565b600080604083850312156118a257600080fd5b82356118ad81611724565b91506118bb60208401611829565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156118fc576118fc6118c4565b60405290565b604080519081016001600160401b03811182821017156118fc576118fc6118c4565b604051601f8201601f191681016001600160401b038111828210171561194c5761194c6118c4565b604052919050565b600082601f83011261196557600080fd5b813560206001600160401b03821115611980576119806118c4565b8160051b61198f828201611924565b92835284810182019282810190878511156119a957600080fd5b83870192505b848310156119c8578235825291830191908301906119af565b979650505050505050565b600082601f8301126119e457600080fd5b6119ec611902565b8060408401858111156119fe57600080fd5b845b81811015611a18578035845260209384019301611a00565b509095945050505050565b60008060008060006101408688031215611a3c57600080fd5b611a4586611829565b94506020808701356001600160401b03811115611a6157600080fd5b611a6d89828a01611954565b9550506040611a7e89828a016119d3565b945088609f890112611a8f57600080fd5b611a97611902565b806101008a018b811115611aaa57600080fd5b60808b015b81811015611ace57611ac18d826119d3565b8452928501928401611aaf565b50819650611adc8c826119d3565b955050505050509295509295909350565b600081518084526020808501945080840160005b83811015611b1d57815187529582019590820190600101611b01565b509495945050505050565b602081528151602082015260208201516040820152604082015160608201526000606083015160a06080840152611b6260c0840182611aed565b90506080840151601f198483030160a0850152611b7f82826116c5565b95945050505050565b60008060408385031215611b9b57600080fd5b8235611ba681611724565b91506020830135611bb681611724565b809150509250929050565b600080600060608486031215611bd657600080fd5b611bdf84611829565b9250602080850135611bf081611724565b925060408501356001600160401b0380821115611c0c57600080fd5b9086019060a08289031215611c2057600080fd5b611c286118da565b82358152838301358482015260408301356040820152606083013582811115611c5057600080fd5b611c5c8a828601611954565b606083015250608083013582811115611c7457600080fd5b80840193505088601f840112611c8957600080fd5b823582811115611c9b57611c9b6118c4565b611cad601f8201601f19168601611924565b92508083528985828601011115611cc357600080fd5b8085850186850137600085828501015250816080820152809450505050509250925092565b600181811c90821680611cfc57607f821691505b602082108103611d1c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156104cb57634e487b7160e01b600052601160045260246000fd5b8060005b6002811015610eb6578151845260209384019390910190600101611d47565b60008154611d7381611ce8565b808552602060018381168015611d905760018114611daa57611dd8565b60ff1985168884015283151560051b880183019550611dd8565b866000528260002060005b85811015611dd05781548a8201860152908301908401611db5565b890184019650505b505050505092915050565b6000610140808352611df781840189611aed565b90506020611e0781850189611d43565b606084018760005b6002811015611e3657611e23838351611d43565b6040929092019190830190600101611e0f565b505050611e4660e0850187611d43565b83820361012085015284548252600180860154828401526002860154604084015260a0606084018190526003870180549185018290526000908152838120929160c08601905b80831015611ea95784548252938301939183019190850190611e8c565b508581036080870152611ebf8160048b01611d66565b9d9c50505050505050505050505050565b600060208284031215611ee257600080fd5b8151801515811461171d57600080fd5b601f82111561140e57600081815260208120601f850160051c81016020861015611f195750805b601f850160051c820191505b81811015611f3857828155600101611f25565b505050505050565b81516001600160401b03811115611f5957611f596118c4565b611f6d81611f678454611ce8565b84611ef2565b602080601f831160018114611fa25760008415611f8a5750858301515b600019600386901b1c1916600185901b178555611f38565b600085815260208120601f198616915b82811015611fd157888601518255948401946001909101908401611fb2565b5085821015611fef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561201157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122012f9c119d1d4c64ebec7af66427fcd366c3889d09772e658dad3948a38fbe22664736f6c63430008110033",
    "sourceMap": "230:1821:20:-:0;;;493:20;3173:2:12;493::20;:20;:::i;:::-;489:24;;:1;:24;:::i;:::-;440:73;;520:92;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;590:5;597:7;2042:5:12;:13;590:5:20;2042::12;:13;:::i;:::-;-1:-1:-1;2065:7:12;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;936:32:11;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;520:92:20;;230:1821;;640:96:15;719:10;;640:96::o;2433:187:11:-;2525:6;;;-1:-1:-1;;;;;2541:17:11;;;-1:-1:-1;;;;;;2541:17:11;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;14:127:29:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:422;235:1;278:5;235:1;292:270;313:7;303:8;300:21;292:270;;;372:4;368:1;364:6;360:17;354:4;351:27;348:53;;;381:18;;:::i;:::-;431:7;421:8;417:22;414:55;;;451:16;;;;414:55;530:22;;;;490:15;;;;292:270;;;296:3;146:422;;;;;:::o;573:806::-;622:5;652:8;642:80;;-1:-1:-1;693:1:29;707:5;;642:80;741:4;731:76;;-1:-1:-1;778:1:29;792:5;;731:76;823:4;841:1;836:59;;;;909:1;904:130;;;;816:218;;836:59;866:1;857:10;;880:5;;;904:130;941:3;931:8;928:17;925:43;;;948:18;;:::i;:::-;-1:-1:-1;;1004:1:29;990:16;;1019:5;;816:218;;1118:2;1108:8;1105:16;1099:3;1093:4;1090:13;1086:36;1080:2;1070:8;1067:16;1062:2;1056:4;1053:12;1049:35;1046:77;1043:159;;;-1:-1:-1;1155:19:29;;;1187:5;;1043:159;1234:34;1259:8;1253:4;1234:34;:::i;:::-;1304:6;1300:1;1296:6;1292:19;1283:7;1280:32;1277:58;;;1315:18;;:::i;:::-;1353:20;;-1:-1:-1;573:806:29;;;;;:::o;1384:131::-;1444:5;1473:36;1500:8;1494:4;1473:36;:::i;:::-;1464:45;1384:131;-1:-1:-1;;;1384:131:29:o;1520:168::-;1593:9;;;1624;;1641:15;;;1635:22;;1621:37;1611:71;;1662:18;;:::i;1693:127::-;1754:10;1749:3;1745:20;1742:1;1735:31;1785:4;1782:1;1775:15;1809:4;1806:1;1799:15;1825:840;1879:5;1932:3;1925:4;1917:6;1913:17;1909:27;1899:55;;1950:1;1947;1940:12;1899:55;1973:13;;-1:-1:-1;;;;;2035:10:29;;;2032:36;;;2048:18;;:::i;:::-;2123:2;2117:9;2091:2;2177:13;;-1:-1:-1;;2173:22:29;;;2197:2;2169:31;2165:40;2153:53;;;2221:18;;;2241:22;;;2218:46;2215:72;;;2267:18;;:::i;:::-;2307:10;2303:2;2296:22;2342:2;2334:6;2327:18;2364:4;2354:14;;2409:3;2404:2;2399;2391:6;2387:15;2383:24;2380:33;2377:53;;;2426:1;2423;2416:12;2377:53;2448:1;2439:10;;2458:133;2472:2;2469:1;2466:9;2458:133;;;2560:14;;;2556:23;;2550:30;2529:14;;;2525:23;;2518:63;2483:10;;;;2458:133;;;2633:1;2611:15;;;2607:24;;;2600:35;;;;2615:6;1825:840;-1:-1:-1;;;;1825:840:29:o;2670:562::-;2769:6;2777;2830:2;2818:9;2809:7;2805:23;2801:32;2798:52;;;2846:1;2843;2836:12;2798:52;2873:16;;-1:-1:-1;;;;;2938:14:29;;;2935:34;;;2965:1;2962;2955:12;2935:34;2988:61;3041:7;3032:6;3021:9;3017:22;2988:61;:::i;:::-;2978:71;;3095:2;3084:9;3080:18;3074:25;3058:41;;3124:2;3114:8;3111:16;3108:36;;;3140:1;3137;3130:12;3108:36;;3163:63;3218:7;3207:8;3196:9;3192:24;3163:63;:::i;:::-;3153:73;;;2670:562;;;;;:::o;3237:380::-;3316:1;3312:12;;;;3359;;;3380:61;;3434:4;3426:6;3422:17;3412:27;;3380:61;3487:2;3479:6;3476:14;3456:18;3453:38;3450:161;;3533:10;3528:3;3524:20;3521:1;3514:31;3568:4;3565:1;3558:15;3596:4;3593:1;3586:15;3450:161;;3237:380;;;:::o;3748:545::-;3850:2;3845:3;3842:11;3839:448;;;3886:1;3911:5;3907:2;3900:17;3956:4;3952:2;3942:19;4026:2;4014:10;4010:19;4007:1;4003:27;3997:4;3993:38;4062:4;4050:10;4047:20;4044:47;;;-1:-1:-1;4085:4:29;4044:47;4140:2;4135:3;4131:12;4128:1;4124:20;4118:4;4114:31;4104:41;;4195:82;4213:2;4206:5;4203:13;4195:82;;;4258:17;;;4239:1;4228:13;4195:82;;;4199:3;;;3839:448;3748:545;;;:::o;4469:1352::-;4589:10;;-1:-1:-1;;;;;4611:30:29;;4608:56;;;4644:18;;:::i;:::-;4673:97;4763:6;4723:38;4755:4;4749:11;4723:38;:::i;:::-;4717:4;4673:97;:::i;:::-;4825:4;;4889:2;4878:14;;4906:1;4901:663;;;;5608:1;5625:6;5622:89;;;-1:-1:-1;5677:19:29;;;5671:26;5622:89;-1:-1:-1;;4426:1:29;4422:11;;;4418:24;4414:29;4404:40;4450:1;4446:11;;;4401:57;5724:81;;4871:944;;4901:663;3695:1;3688:14;;;3732:4;3719:18;;-1:-1:-1;;4937:20:29;;;5055:236;5069:7;5066:1;5063:14;5055:236;;;5158:19;;;5152:26;5137:42;;5250:27;;;;5218:1;5206:14;;;;5085:19;;5055:236;;;5059:3;5319:6;5310:7;5307:19;5304:201;;;5380:19;;;5374:26;-1:-1:-1;;5463:1:29;5459:14;;;5475:3;5455:24;5451:37;5447:42;5432:58;5417:74;;5304:201;-1:-1:-1;;;;;5551:1:29;5535:14;;;5531:22;5518:36;;-1:-1:-1;4469:1352:29:o;:::-;230:1821:20;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806395d89b41116100de578063b68967e211610097578063dd62ed3e11610071578063dd62ed3e146103d9578063f1435326146103ec578063f2fde38b146103ff578063fee207e61461041257600080fd5b8063b68967e214610386578063c76d084514610399578063cb0e0d7d146103b957600080fd5b806395d89b41146102de57806396bf4741146102e6578063a457c2d714610309578063a87231141461031c578063a9059cbb14610345578063b45c0fdf1461035857600080fd5b806337ba95231161014b5780637042f36b116101255780637042f36b1461029157806370a082311461029a578063715018a6146102c35780638da5cb5b146102cd57600080fd5b806337ba952314610249578063395093511461025e57806363ec508f1461027157600080fd5b806306fdde0314610193578063095ea7b3146101b157806318160ddd146101d457806323b872dd146101e65780632a2d0c47146101f9578063313ce5671461023a575b600080fd5b61019b610425565b6040516101a8919061170a565b60405180910390f35b6101c46101bf366004611739565b6104b7565b60405190151581526020016101a8565b6002545b6040519081526020016101a8565b6101c46101f4366004611765565b6104d1565b6102226102073660046117a6565b600a602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a8565b604051601281526020016101a8565b6102516104f5565b6040516101a891906117bf565b6101c461026c366004611739565b61057e565b610279600181565b6040516001600160401b0390911681526020016101a8565b6101d8600c5481565b6101d86102a836600461180c565b6001600160a01b031660009081526020819052604090205490565b6102cb6105a0565b005b6005546001600160a01b0316610222565b61019b6105b4565b6102f96102f4366004611845565b6105c3565b6040516101a89493929190611860565b6101c4610317366004611739565b610676565b61022261032a366004611845565b6008602052600090815260409020546001600160a01b031681565b6101c4610353366004611739565b6106f6565b6101c461036636600461188f565b600660209081526000928352604080842090915290825290205460ff1681565b6101c4610394366004611a23565b610704565b6103ac6103a7366004611845565b610962565b6040516101a89190611b28565b6101d86103c736600461180c565b600b6020526000908152604090205481565b6101d86103e7366004611b88565b610abf565b6102796103fa3660046117a6565b610aea565b6102cb61040d36600461180c565b610b27565b6101c4610420366004611bc1565b610ba0565b60606003805461043490611ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461046090611ce8565b80156104ad5780601f10610482576101008083540402835291602001916104ad565b820191906000526020600020905b81548152906001019060200180831161049057829003601f168201915b5050505050905090565b6000336104c5818585610d1e565b60019150505b92915050565b6000336104df858285610e42565b6104ea858585610ebc565b506001949350505050565b606060098054806020026020016040519081016040528092919081815260200182805480156104ad57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b0316815260200190600801906020826007010492830192600103820291508084116105325790505050505050905090565b6000336104c58185856105918383610abf565b61059b9190611d22565b610d1e565b6105a861106b565b6105b260006110c5565b565b60606004805461043490611ce8565b6007602052600090815260409020805460018201546002830154600484018054939492939192916105f390611ce8565b80601f016020809104026020016040519081016040528092919081815260200182805461061f90611ce8565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b5050505050905084565b600033816106848286610abf565b9050838110156106e95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6104ea8286868403610d1e565b6000336104c5818585610ebc565b6001600160401b0385166000908152600860205260408120546001600160a01b03166107835760405162461bcd60e51b815260206004820152602860248201527f76616c696461746f72206973206e6f742073657420666f7220746869732072656044820152671c5d595cdd081a5960c21b60648201526084016106e0565b6001600160401b03861660009081526007602052604081205490036107f65760405162461bcd60e51b8152602060048201526024808201527f7175657279206973206e6f742073657420666f722074686973207265717565736044820152631d081a5960e21b60648201526084016106e0565b6001600160401b03861660009081526008602052604090205461082590879087906001600160a01b0316611117565b6001600160401b03861660009081526008602090815260408083205460079092529182902091516319f8754160e21b81526001600160a01b03909116916367e1d5049161087d91899189918991899190600401611de3565b602060405180830381865afa15801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611ed0565b61090a5760405162461bcd60e51b815260206004820152601b60248201527f70726f6f6620726573706f6e7365206973206e6f742076616c6964000000000060448201526064016106e0565b3360009081526006602090815260408083206001600160401b038a1684528252808320805460ff19166001179055600890915290205461095690879087906001600160a01b0316611207565b50600195945050505050565b6109946040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b6001600160401b038216600090815260076020908152604091829020825160a081018452815481526001820154818401526002820154818501526003820180548551818602810186019096528086529194929360608601939290830182828015610a1d57602002820191906000526020600020905b815481526020019060010190808311610a09575b50505050508152602001600482018054610a3690611ce8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6290611ce8565b8015610aaf5780601f10610a8457610100808354040283529160200191610aaf565b820191906000526020600020905b815481529060010190602001808311610a9257829003601f168201915b5050505050815250509050919050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60098181548110610afa57600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b610b2f61106b565b6001600160a01b038116610b945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106e0565b610b9d816110c5565b50565b6000610baa61106b565b6001600160401b0384166000908152600860205260409020546001600160a01b0316610c2e57600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af6004820401805460039092166008026101000a6001600160401b0381810219909316928716029190911790555b60608201516001600160401b03851660009081526007602090815260409091208251610c639360039092019290910190611665565b506040808301516001600160401b038616600090815260076020529190912060028101919091556080830151600490910190610c9f9082611f40565b506020808301516001600160401b0386166000908152600790925260409091206001810191909155825181556080830151600490910190610ce09082611f40565b50506001600160401b038316600090815260086020526040902080546001600160a01b0384166001600160a01b031990911617905560019392505050565b6001600160a01b038316610d805760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106e0565b6001600160a01b038216610de15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106e0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610e4e8484610abf565b90506000198114610eb65781811015610ea95760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106e0565b610eb68484848403610d1e565b50505050565b6001600160a01b038316610f205760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106e0565b6001600160a01b038216610f825760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106e0565b610f8d83838361136e565b6001600160a01b038316600090815260208190526040902054818110156110055760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106e0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610eb6565b6005546001600160a01b031633146105b25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106e0565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061119c83836001600160a01b0316639f442afa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f9190611fff565b8151811061118f5761118f612018565b6020026020010151611413565b9050336001600160a01b03821614610eb65760405162461bcd60e51b815260206004820152602860248201527f6164647265737320696e2070726f6f66206973206e6f7420612073656e646572604482015267206164647265737360c01b60648201526084016106e0565b6001600160401b038316600114801561122d5750336000908152600b6020526040902054155b61128b5760405162461bcd60e51b815260206004820152602960248201527f70726f6f662063616e206e6f74206265207375626d6974746564206d6f7265206044820152687468616e206f6e636560b81b60648201526084016106e0565b600082826001600160a01b0316639f442afa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190611fff565b8151811061130057611300612018565b6020908102919091018101516000818152600a9092526040909120549091506001600160a01b0316610eb65761133833600c54611570565b336000818152600b60209081526040808320859055938252600a90529190912080546001600160a01b0319169091179055505050565b6001600160a01b0382166000908152600660209081526040808320600180855292529091205460ff1615151461140e576040805162461bcd60e51b81526020600482015260248101919091527f6f6e6c79206964656e7469746965732077686f2070726f76696465642070726f60448201527f6f662061726520616c6c6f77656420746f207265636569766520746f6b656e7360648201526084016106e0565b505050565b60006104cb6115696115648460008190506008817eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff16901b6008827fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff0016901c1790506010817dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff16901b6010827fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff000016901c1790506020817bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16901b6020827fffffffff00000000ffffffff00000000ffffffff00000000ffffffff0000000016901c17905060408177ffffffffffffffff0000000000000000ffffffffffffffff16901b60408277ffffffffffffffff0000000000000000ffffffffffffffff1916901c179050608081901b608082901c179050919050565b61163b565b6014015190565b6001600160a01b0382166115c65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106e0565b6115d26000838361136e565b80600260008282546115e49190611d22565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b8280548282559060005260206000209081019282156116a0579160200282015b828111156116a0578251825591602001919060010190611685565b506116ac9291506116b0565b5090565b5b808211156116ac57600081556001016116b1565b60008151808452602060005b828110156116ec5784810182015186820183015281016116d1565b506000858301820152601f909101601f191690930190920192915050565b60208152600061171d60208301846116c5565b9392505050565b6001600160a01b0381168114610b9d57600080fd5b6000806040838503121561174c57600080fd5b823561175781611724565b946020939093013593505050565b60008060006060848603121561177a57600080fd5b833561178581611724565b9250602084013561179581611724565b929592945050506040919091013590565b6000602082840312156117b857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156118005783516001600160401b0316835292840192918401916001016117db565b50909695505050505050565b60006020828403121561181e57600080fd5b813561171d81611724565b80356001600160401b038116811461184057600080fd5b919050565b60006020828403121561185757600080fd5b61171d82611829565b84815283602082015282604082015260806060820152600061188560808301846116c5565b9695505050505050565b600080604083850312156118a257600080fd5b82356118ad81611724565b91506118bb60208401611829565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156118fc576118fc6118c4565b60405290565b604080519081016001600160401b03811182821017156118fc576118fc6118c4565b604051601f8201601f191681016001600160401b038111828210171561194c5761194c6118c4565b604052919050565b600082601f83011261196557600080fd5b813560206001600160401b03821115611980576119806118c4565b8160051b61198f828201611924565b92835284810182019282810190878511156119a957600080fd5b83870192505b848310156119c8578235825291830191908301906119af565b979650505050505050565b600082601f8301126119e457600080fd5b6119ec611902565b8060408401858111156119fe57600080fd5b845b81811015611a18578035845260209384019301611a00565b509095945050505050565b60008060008060006101408688031215611a3c57600080fd5b611a4586611829565b94506020808701356001600160401b03811115611a6157600080fd5b611a6d89828a01611954565b9550506040611a7e89828a016119d3565b945088609f890112611a8f57600080fd5b611a97611902565b806101008a018b811115611aaa57600080fd5b60808b015b81811015611ace57611ac18d826119d3565b8452928501928401611aaf565b50819650611adc8c826119d3565b955050505050509295509295909350565b600081518084526020808501945080840160005b83811015611b1d57815187529582019590820190600101611b01565b509495945050505050565b602081528151602082015260208201516040820152604082015160608201526000606083015160a06080840152611b6260c0840182611aed565b90506080840151601f198483030160a0850152611b7f82826116c5565b95945050505050565b60008060408385031215611b9b57600080fd5b8235611ba681611724565b91506020830135611bb681611724565b809150509250929050565b600080600060608486031215611bd657600080fd5b611bdf84611829565b9250602080850135611bf081611724565b925060408501356001600160401b0380821115611c0c57600080fd5b9086019060a08289031215611c2057600080fd5b611c286118da565b82358152838301358482015260408301356040820152606083013582811115611c5057600080fd5b611c5c8a828601611954565b606083015250608083013582811115611c7457600080fd5b80840193505088601f840112611c8957600080fd5b823582811115611c9b57611c9b6118c4565b611cad601f8201601f19168601611924565b92508083528985828601011115611cc357600080fd5b8085850186850137600085828501015250816080820152809450505050509250925092565b600181811c90821680611cfc57607f821691505b602082108103611d1c57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156104cb57634e487b7160e01b600052601160045260246000fd5b8060005b6002811015610eb6578151845260209384019390910190600101611d47565b60008154611d7381611ce8565b808552602060018381168015611d905760018114611daa57611dd8565b60ff1985168884015283151560051b880183019550611dd8565b866000528260002060005b85811015611dd05781548a8201860152908301908401611db5565b890184019650505b505050505092915050565b6000610140808352611df781840189611aed565b90506020611e0781850189611d43565b606084018760005b6002811015611e3657611e23838351611d43565b6040929092019190830190600101611e0f565b505050611e4660e0850187611d43565b83820361012085015284548252600180860154828401526002860154604084015260a0606084018190526003870180549185018290526000908152838120929160c08601905b80831015611ea95784548252938301939183019190850190611e8c565b508581036080870152611ebf8160048b01611d66565b9d9c50505050505050505050505050565b600060208284031215611ee257600080fd5b8151801515811461171d57600080fd5b601f82111561140e57600081815260208120601f850160051c81016020861015611f195750805b601f850160051c820191505b81811015611f3857828155600101611f25565b505050505050565b81516001600160401b03811115611f5957611f596118c4565b611f6d81611f678454611ce8565b84611ef2565b602080601f831160018114611fa25760008415611f8a5750858301515b600019600386901b1c1916600185901b178555611f38565b600085815260208120601f198616915b82811015611fd157888601518255948401946001909101908401611fb2565b5085821015611fef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020828403121561201157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122012f9c119d1d4c64ebec7af66427fcd366c3889d09772e658dad3948a38fbe22664736f6c63430008110033",
    "sourceMap": "230:1821:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1278:14:29;;1271:22;1253:41;;1241:2;1226:18;4431:197:12;1113:187:29;3242:106:12;3329:12;;3242:106;;;1451:25:29;;;1439:2;1424:18;3242:106:12;1305:177:29;5190:286:12;;;;;;:::i;:::-;;:::i;335:46:20:-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;335:46:20;;;;;;-1:-1:-1;;;;;2297:32:29;;;2279:51;;2267:2;2252:18;335:46:20;2133:203:29;3091:91:12;;;3173:2;2483:36:29;;2471:2;2456:18;3091:91:12;2341:184:29;2641:145:27;;;:::i;:::-;;;;;;;:::i;5871:234:12:-;;;;;;:::i;:::-;;:::i;282:46:20:-;;327:1;282:46;;;;;-1:-1:-1;;;;;3352:31:29;;;3334:50;;3322:2;3307:18;282:46:20;3190:200:29;440:73:20;;;;;;3406:125:12;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:12;3480:7;3506:18;;;;;;;;;;;;3406:125;1831:101:11;;;:::i;:::-;;1201:85;1273:6;;-1:-1:-1;;;;;1273:6:11;1201:85;;2365:102:12;;;:::i;404:71:27:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;6592:427:12:-;;;;;;:::i;:::-;;:::i;481:61:27:-;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;481:61:27;;;3727:189:12;;;;;;:::i;:::-;;:::i;341:57:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;589:1070;;;;;;:::i;:::-;;:::i;1665:197::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;387:46:20:-;;;;;;:::i;:::-;;;;;;;;;;;;;;3974:149:12;;;;;;:::i;:::-;;:::i;549:33:27:-;;;;;;:::i;:::-;;:::i;2081:198:11:-;;;;;;:::i;:::-;;:::i;1868:767:27:-;;;;;;:::i;:::-;;:::i;2154:98:12:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:15;4568:32:12;719:10:15;4584:7:12;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:15;5373:38:12;5389:4;719:10:15;5404:6:12;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:12;;5190:286;-1:-1:-1;;;;5190:286:12:o;2641:145:27:-;2720:19;2762:17;2755:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2755:24:27;-1:-1:-1;;;;;2755:24:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2641:145;:::o;5871:234:12:-;5959:4;719:10:15;6013:64:12;719:10:15;6029:7:12;6066:10;6038:25;719:10:15;6029:7:12;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;1831:101:11:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2365:102:12:-;2421:13;2453:7;2446:14;;;;;:::i;404:71:27:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6592:427:12:-;6685:4;719:10:15;6685:4:12;6766:25;719:10:15;6783:7:12;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:12;;12685:2:29;6801:85:12;;;12667:21:29;12724:2;12704:18;;;12697:30;12763:34;12743:18;;;12736:62;-1:-1:-1;;;12814:18:29;;;12807:35;12859:19;;6801:85:12;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:15;3860:28:12;719:10:15;3877:2:12;3881:6;3860:9;:28::i;589:1070:27:-;-1:-1:-1;;;;;835:28:27;;798:4;835:28;;;:17;:28;;;;;;-1:-1:-1;;;;;835:28:27;814:148;;;;-1:-1:-1;;;814:148:27;;13091:2:29;814:148:27;;;13073:21:29;13130:2;13110:18;;;13103:30;13169:34;13149:18;;;13142:62;-1:-1:-1;;;13220:18:29;;;13213:38;13268:19;;814:148:27;12889:404:29;814:148:27;-1:-1:-1;;;;;1013:25:27;;;;;;:14;:25;;;;;:32;:37;;992:120;;;;-1:-1:-1;;;992:120:27;;13500:2:29;992:120:27;;;13482:21:29;13539:2;13519:18;;;13512:30;13578:34;13558:18;;;13551:62;-1:-1:-1;;;13629:18:29;;;13622:34;13673:19;;992:120:27;13298:400:29;992:120:27;-1:-1:-1;;;;;1177:28:27;;;;;;:17;:28;;;;;;1139:67;;1158:9;;1169:6;;-1:-1:-1;;;;;1177:28:27;1139:18;:67::i;:::-;-1:-1:-1;;;;;1238:28:27;;;;;;:17;:28;;;;;;;;;1372:14;:25;;;;;;;1238:173;;-1:-1:-1;;;1238:173:27;;-1:-1:-1;;;;;1238:28:27;;;;:35;;:173;;1291:6;;1315:1;;1334;;1353;;1372:25;1238:173;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1217:247;;;;-1:-1:-1;;;1217:247:27;;17432:2:29;1217:247:27;;;17414:21:29;17471:2;17451:18;;;17444:30;17510:29;17490:18;;;17483:57;17557:18;;1217:247:27;17230:351:29;1217:247:27;1482:10;1475:18;;;;:6;:18;;;;;;;;-1:-1:-1;;;;;1475:29:27;;;;;;;;;:36;;-1:-1:-1;;1475:36:27;1507:4;1475:36;;;1602:17;:28;;;;;;1565:66;;1494:9;;1594:6;;-1:-1:-1;;;;;1602:28:27;1565:17;:66::i;:::-;-1:-1:-1;1648:4:27;589:1070;;;;;;;:::o;1665:197::-;1770:37;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1770:37:27;-1:-1:-1;;;;;1830:25:27;;;;;;:14;:25;;;;;;;;;1823:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1830:25;;1823:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1665:197;;;:::o;3974:149:12:-;-1:-1:-1;;;;;4089:18:12;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;549:33:27:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;549:33:27;;:::o;2081:198:11:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:11;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:11;;17788:2:29;2161:73:11::1;::::0;::::1;17770:21:29::0;17827:2;17807:18;;;17800:30;17866:34;17846:18;;;17839:62;-1:-1:-1;;;17917:18:29;;;17910:36;17963:19;;2161:73:11::1;17586:402:29::0;2161:73:11::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1868:767:27:-;2050:4;1094:13:11;:11;:13::i;:::-;-1:-1:-1;;;;;2070:28:27;::::1;2128:4;2070:28:::0;;;:17:::1;:28;::::0;;;;;-1:-1:-1;;;;;2070:28:27::1;2066:128;;2150:17;:33:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;2150:33:27;;;;;::::1;::::0;::::1;;::::0;;;;;;::::1;;;;-1:-1:-1::0;;;;;2150:33:27;;::::1;;::::0;;::::1;::::0;;::::1;;::::0;;;::::1;::::0;;2066:128:::1;2237:11;::::0;::::1;::::0;-1:-1:-1;;;;;2203:25:27;::::1;;::::0;;;:14:::1;:25;::::0;;;;;;;:45;;::::1;::::0;:31:::1;::::0;;::::1;::::0;:45;;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2295:14:27::1;::::0;;::::1;::::0;-1:-1:-1;;;;;2258:25:27;::::1;;::::0;;;:14:::1;:25;::::0;;;;;:34:::1;::::0;::::1;:51:::0;;;;2357:15:::1;::::0;::::1;::::0;2319:35:::1;::::0;;::::1;::::0;:53:::1;::::0;:35;:53:::1;:::i;:::-;-1:-1:-1::0;2420:15:27::1;::::0;;::::1;::::0;-1:-1:-1;;;;;2382:25:27;::::1;;::::0;;;:14:::1;:25:::0;;;;;;;:35:::1;::::0;::::1;:53:::0;;;;2480:12;;2445:47;;2541:15:::1;::::0;::::1;::::0;2503:35:::1;::::0;;::::1;::::0;:53:::1;::::0;:35;:53:::1;:::i;:::-;-1:-1:-1::0;;;;;;;2567:28:27;::::1;;::::0;;;:17:::1;:28;::::0;;;;:40;;-1:-1:-1;;;;;2567:40:27;::::1;-1:-1:-1::0;;;;;;2567:40:27;;::::1;;::::0;;;1868:767;;;;;:::o;10504:370:12:-;-1:-1:-1;;;;;10635:19:12;;10627:68;;;;-1:-1:-1;;;10627:68:12;;20284:2:29;10627:68:12;;;20266:21:29;20323:2;20303:18;;;20296:30;20362:34;20342:18;;;20335:62;-1:-1:-1;;;20413:18:29;;;20406:34;20457:19;;10627:68:12;20082:400:29;10627:68:12;-1:-1:-1;;;;;10713:21:12;;10705:68;;;;-1:-1:-1;;;10705:68:12;;20689:2:29;10705:68:12;;;20671:21:29;20728:2;20708:18;;;20701:30;20767:34;20747:18;;;20740:62;-1:-1:-1;;;20818:18:29;;;20811:32;20860:19;;10705:68:12;20487:398:29;10705:68:12;-1:-1:-1;;;;;10784:18:12;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1451:25:29;;;10835:32:12;;1424:18:29;10835:32:12;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:12;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:12;;21092:2:29;11404:68:12;;;21074:21:29;21131:2;21111:18;;;21104:30;21170:31;21150:18;;;21143:59;21219:18;;11404:68:12;20890:353:29;11404:68:12;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:12;;7591:68;;;;-1:-1:-1;;;7591:68:12;;21450:2:29;7591:68:12;;;21432:21:29;21489:2;21469:18;;;21462:30;21528:34;21508:18;;;21501:62;-1:-1:-1;;;21579:18:29;;;21572:35;21624:19;;7591:68:12;21248:401:29;7591:68:12;-1:-1:-1;;;;;7677:16:12;;7669:64;;;;-1:-1:-1;;;7669:64:12;;21856:2:29;7669:64:12;;;21838:21:29;21895:2;21875:18;;;21868:30;21934:34;21914:18;;;21907:62;-1:-1:-1;;;21985:18:29;;;21978:33;22028:19;;7669:64:12;21654:399:29;7669:64:12;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;-1:-1:-1;;;;;7815:15:12;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:12;;22260:2:29;7840:72:12;;;22242:21:29;22299:2;22279:18;;;22272:30;22338:34;22318:18;;;22311:62;-1:-1:-1;;;22389:18:29;;;22382:36;22435:19;;7840:72:12;22058:402:29;7840:72:12;-1:-1:-1;;;;;7946:15:12;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1451:25:29;;;8161:13:12;;8210:26;;1424:18:29;8210:26:12;;;;;;;8247:37;1745:304:20;1359:130:11;1273:6;;-1:-1:-1;;;;;1273:6:11;719:10:15;1422:23:11;1414:68;;;;-1:-1:-1;;;1414:68:11;;22667:2:29;1414:68:11;;;22649:21:29;;;22686:18;;;22679:30;22745:34;22725:18;;;22718:62;22797:18;;1414:68:11;22465:356:29;2433:187:11;2525:6;;;-1:-1:-1;;;;;2541:17:11;;;-1:-1:-1;;;;;;2541:17:11;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;622:481:20:-;870:12;885:94;927:6;934:9;-1:-1:-1;;;;;934:32:20;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;927:42;;;;;;;;:::i;:::-;;;;;;;885:28;:94::i;:::-;870:109;-1:-1:-1;719:10:15;-1:-1:-1;;;;;1010:20:20;;;989:107;;;;-1:-1:-1;;;989:107:20;;23349:2:29;989:107:20;;;23331:21:29;23388:2;23368:18;;;23361:30;23427:34;23407:18;;;23400:62;-1:-1:-1;;;23478:18:29;;;23471:38;23526:19;;989:107:20;23147:404:29;1109:630:20;-1:-1:-1;;;;;1287:32:20;;327:1;1287:32;:66;;;;-1:-1:-1;719:10:15;1323:25:20;;;;:11;:25;;;;;;:30;1287:66;1266:154;;;;-1:-1:-1;;;1266:154:20;;23758:2:29;1266:154:20;;;23740:21:29;23797:2;23777:18;;;23770:30;23836:34;23816:18;;;23809:62;-1:-1:-1;;;23887:18:29;;;23880:39;23936:19;;1266:154:20;23556:405:29;1266:154:20;1431:10;1444:6;1451:9;-1:-1:-1;;;;;1451:32:20;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1444:42;;;;;;;;:::i;:::-;;;;;;;;;;;;1558:1;1531:15;;;:11;:15;;;;;;;;1444:42;;-1:-1:-1;;;;;;1531:15:20;1527:206;;1576:58;719:10:15;1602:31:20;;1576:11;:58::i;:::-;719:10:15;1648:25:20;;;;:11;:25;;;;;;;;:30;;;1692:15;;;:11;:15;;;;;;:30;;-1:-1:-1;;;;;;1692:30:20;;;;;;-1:-1:-1;;;1109:630:20:o;1745:304::-;-1:-1:-1;;;;;1913:10:20;;;;;;:6;:10;;;;;;;;327:1;1913:31;;;;;;;;;;;:39;;;1892:150;;;;;-1:-1:-1;;;1892:150:20;;24168:2:29;1892:150:20;;;24150:21:29;24187:18;;;24180:30;;;;24246:34;24226:18;;;24219:62;24317:34;24297:18;;;24290:62;24369:19;;1892:150:20;23966:428:29;1892:150:20;1745:304;;;:::o;4407:141:25:-;4470:7;4496:45;4511:29;4525:14;4533:5;452:9;477:5;473:9;;766:1;659;679:66;659:86;658:109;;640:1;533;553:66;533:86;532:109;;531:237;515:253;;1065:2;958:1;978:66;958:86;957:110;;938:2;831:1;851:66;831:86;830:110;;829:239;813:255;;1365:2;1258:1;1278:66;1258:86;1257:110;;1238:2;1131:1;1151:66;1131:86;1130:110;;1129:239;1113:255;;1665:2;1558:1;1578:66;1558:86;1557:110;;1538:2;1431:1;-1:-1:-1;;1431:86:25;1430:110;;1429:239;1413:255;;1737:3;1732:1;:8;;1724:3;1719:1;:8;;1718:23;1714:27;;397:1351;;;;4525:14;4511:13;:29::i;:::-;4337:2;4328:12;4322:19;;4174:183;8567:535:12;-1:-1:-1;;;;;8650:21:12;;8642:65;;;;-1:-1:-1;;;8642:65:12;;24601:2:29;8642:65:12;;;24583:21:29;24640:2;24620:18;;;24613:30;24679:33;24659:18;;;24652:61;24730:18;;8642:65:12;24399:355:29;8642:65:12;8718:49;8747:1;8751:7;8760:6;8718:20;:49::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:12;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;1451:25:29;;;8999:37:12;;1424:18:29;8999:37:12;;;;;;;8567:535;;:::o;185:170:25:-;272:13;;;282:2;272:13;;;;;;;;;242:14;;272:13;;;;;;;;-1:-1:-1;;;332:2:25;325:10;;318:21;;;;-1:-1:-1;325:10:25;185:170::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:413:29;56:3;94:5;88:12;121:6;116:3;109:19;147:4;169:1;179:133;193:6;190:1;187:13;179:133;;;282:13;;;278:22;;272:29;254:11;;;250:20;;243:59;208:10;;179:133;;;-1:-1:-1;355:1:29;332:16;;;328:25;;321:36;411:2;390:15;;;-1:-1:-1;;386:29:29;377:39;;;373:48;;;;14:413;-1:-1:-1;;14:413:29:o;432:220::-;581:2;570:9;563:21;544:4;601:45;642:2;631:9;627:18;619:6;601:45;:::i;:::-;593:53;432:220;-1:-1:-1;;;432:220:29:o;657:131::-;-1:-1:-1;;;;;732:31:29;;722:42;;712:70;;778:1;775;768:12;793:315;861:6;869;922:2;910:9;901:7;897:23;893:32;890:52;;;938:1;935;928:12;890:52;977:9;964:23;996:31;1021:5;996:31;:::i;:::-;1046:5;1098:2;1083:18;;;;1070:32;;-1:-1:-1;;;793:315:29:o;1487:456::-;1564:6;1572;1580;1633:2;1621:9;1612:7;1608:23;1604:32;1601:52;;;1649:1;1646;1639:12;1601:52;1688:9;1675:23;1707:31;1732:5;1707:31;:::i;:::-;1757:5;-1:-1:-1;1814:2:29;1799:18;;1786:32;1827:33;1786:32;1827:33;:::i;:::-;1487:456;;1879:7;;-1:-1:-1;;;1933:2:29;1918:18;;;;1905:32;;1487:456::o;1948:180::-;2007:6;2060:2;2048:9;2039:7;2035:23;2031:32;2028:52;;;2076:1;2073;2066:12;2028:52;-1:-1:-1;2099:23:29;;1948:180;-1:-1:-1;1948:180:29:o;2530:655::-;2699:2;2751:21;;;2821:13;;2724:18;;;2843:22;;;2670:4;;2699:2;2922:15;;;;2896:2;2881:18;;;2670:4;2965:194;2979:6;2976:1;2973:13;2965:194;;;3044:13;;-1:-1:-1;;;;;3040:38:29;3028:51;;3134:15;;;;3099:12;;;;3001:1;2994:9;2965:194;;;-1:-1:-1;3176:3:29;;2530:655;-1:-1:-1;;;;;;2530:655:29:o;3395:247::-;3454:6;3507:2;3495:9;3486:7;3482:23;3478:32;3475:52;;;3523:1;3520;3513:12;3475:52;3562:9;3549:23;3581:31;3606:5;3581:31;:::i;3647:171::-;3714:20;;-1:-1:-1;;;;;3763:30:29;;3753:41;;3743:69;;3808:1;3805;3798:12;3743:69;3647:171;;;:::o;3823:184::-;3881:6;3934:2;3922:9;3913:7;3909:23;3905:32;3902:52;;;3950:1;3947;3940:12;3902:52;3973:28;3991:9;3973:28;:::i;4012:435::-;4245:6;4234:9;4227:25;4288:6;4283:2;4272:9;4268:18;4261:34;4331:6;4326:2;4315:9;4311:18;4304:34;4374:3;4369:2;4358:9;4354:18;4347:31;4208:4;4395:46;4436:3;4425:9;4421:19;4413:6;4395:46;:::i;:::-;4387:54;4012:435;-1:-1:-1;;;;;;4012:435:29:o;4687:319::-;4754:6;4762;4815:2;4803:9;4794:7;4790:23;4786:32;4783:52;;;4831:1;4828;4821:12;4783:52;4870:9;4857:23;4889:31;4914:5;4889:31;:::i;:::-;4939:5;-1:-1:-1;4963:37:29;4996:2;4981:18;;4963:37;:::i;:::-;4953:47;;4687:319;;;;;:::o;5011:127::-;5072:10;5067:3;5063:20;5060:1;5053:31;5103:4;5100:1;5093:15;5127:4;5124:1;5117:15;5143:253;5215:2;5209:9;5257:4;5245:17;;-1:-1:-1;;;;;5277:34:29;;5313:22;;;5274:62;5271:88;;;5339:18;;:::i;:::-;5375:2;5368:22;5143:253;:::o;5401:274::-;5473:2;5467:9;;;5503:38;;-1:-1:-1;;;;;5556:34:29;;5592:22;;;5553:62;5550:88;;;5618:18;;:::i;5959:275::-;6030:2;6024:9;6095:2;6076:13;;-1:-1:-1;;6072:27:29;6060:40;;-1:-1:-1;;;;;6115:34:29;;6151:22;;;6112:62;6109:88;;;6177:18;;:::i;:::-;6213:2;6206:22;5959:275;;-1:-1:-1;5959:275:29:o;6239:712::-;6293:5;6346:3;6339:4;6331:6;6327:17;6323:27;6313:55;;6364:1;6361;6354:12;6313:55;6400:6;6387:20;6426:4;-1:-1:-1;;;;;6445:2:29;6442:26;6439:52;;;6471:18;;:::i;:::-;6517:2;6514:1;6510:10;6540:28;6564:2;6560;6556:11;6540:28;:::i;:::-;6602:15;;;6672;;;6668:24;;;6633:12;;;;6704:15;;;6701:35;;;6732:1;6729;6722:12;6701:35;6768:2;6760:6;6756:15;6745:26;;6780:142;6796:6;6791:3;6788:15;6780:142;;;6862:17;;6850:30;;6813:12;;;;6900;;;;6780:142;;;6940:5;6239:712;-1:-1:-1;;;;;;;6239:712:29:o;6956:484::-;7006:5;7059:3;7052:4;7044:6;7040:17;7036:27;7026:55;;7077:1;7074;7067:12;7026:55;7101:22;;:::i;:::-;7145:3;7183:2;7175:6;7171:15;7209:3;7201:6;7198:15;7195:35;;;7226:1;7223;7216:12;7195:35;7250:6;7265:146;7281:6;7276:3;7273:15;7265:146;;;7349:17;;7337:30;;7396:4;7387:14;;;;7298;7265:146;;;-1:-1:-1;7429:5:29;;6956:484;-1:-1:-1;;;;;6956:484:29:o;7445:1200::-;7656:6;7664;7672;7680;7688;7741:3;7729:9;7720:7;7716:23;7712:33;7709:53;;;7758:1;7755;7748:12;7709:53;7781:28;7799:9;7781:28;:::i;:::-;7771:38;;7828:2;7881;7870:9;7866:18;7853:32;-1:-1:-1;;;;;7900:6:29;7897:30;7894:50;;;7940:1;7937;7930:12;7894:50;7963:61;8016:7;8007:6;7996:9;7992:22;7963:61;:::i;:::-;7953:71;;;8043:2;8064:53;8109:7;8104:2;8093:9;8089:18;8064:53;:::i;:::-;8054:63;;8161:7;8155:3;8144:9;8140:19;8136:33;8126:61;;8183:1;8180;8173:12;8126:61;8207:22;;:::i;:::-;8251:3;8292;8281:9;8277:19;8319:7;8311:6;8308:19;8305:39;;;8340:1;8337;8330:12;8305:39;8379:3;8368:9;8364:19;8392:163;8408:6;8403:3;8400:15;8392:163;;;8474:38;8504:7;8499:3;8474:38;:::i;:::-;8462:51;;8533:12;;;;8425;;8392:163;;;8396:3;8574:5;8564:15;;8598:41;8631:7;8623:6;8598:41;:::i;:::-;8588:51;;;;;;;7445:1200;;;;;;;;:::o;8650:435::-;8703:3;8741:5;8735:12;8768:6;8763:3;8756:19;8794:4;8823:2;8818:3;8814:12;8807:19;;8860:2;8853:5;8849:14;8881:1;8891:169;8905:6;8902:1;8899:13;8891:169;;;8966:13;;8954:26;;9000:12;;;;9035:15;;;;8927:1;8920:9;8891:169;;;-1:-1:-1;9076:3:29;;8650:435;-1:-1:-1;;;;;8650:435:29:o;9090:734::-;9281:2;9270:9;9263:21;9326:6;9320:13;9315:2;9304:9;9300:18;9293:41;9388:2;9380:6;9376:15;9370:22;9365:2;9354:9;9350:18;9343:50;9447:2;9439:6;9435:15;9429:22;9424:2;9413:9;9409:18;9402:50;9244:4;9499:2;9491:6;9487:15;9481:22;9540:4;9534:3;9523:9;9519:19;9512:33;9568:63;9626:3;9615:9;9611:19;9597:12;9568:63;:::i;:::-;9554:77;;9680:3;9672:6;9668:16;9662:23;9755:2;9751:7;9739:9;9731:6;9727:22;9723:36;9716:4;9705:9;9701:20;9694:66;9777:41;9811:6;9795:14;9777:41;:::i;:::-;9769:49;9090:734;-1:-1:-1;;;;;9090:734:29:o;9829:388::-;9897:6;9905;9958:2;9946:9;9937:7;9933:23;9929:32;9926:52;;;9974:1;9971;9964:12;9926:52;10013:9;10000:23;10032:31;10057:5;10032:31;:::i;:::-;10082:5;-1:-1:-1;10139:2:29;10124:18;;10111:32;10152:33;10111:32;10152:33;:::i;:::-;10204:7;10194:17;;;9829:388;;;;;:::o;10222:1644::-;10356:6;10364;10372;10425:2;10413:9;10404:7;10400:23;10396:32;10393:52;;;10441:1;10438;10431:12;10393:52;10464:28;10482:9;10464:28;:::i;:::-;10454:38;;10511:2;10563;10552:9;10548:18;10535:32;10576:31;10601:5;10576:31;:::i;:::-;10626:5;-1:-1:-1;10682:2:29;10667:18;;10654:32;-1:-1:-1;;;;;10735:14:29;;;10732:34;;;10762:1;10759;10752:12;10732:34;10785:22;;;;10841:4;10823:16;;;10819:27;10816:47;;;10859:1;10856;10849:12;10816:47;10887:22;;:::i;:::-;10947:2;10934:16;10925:7;10918:33;11006:2;11002;10998:11;10985:25;10980:2;10971:7;10967:16;10960:51;11066:2;11062;11058:11;11045:25;11040:2;11031:7;11027:16;11020:51;11117:2;11113;11109:11;11096:25;11146:2;11136:8;11133:16;11130:36;;;11162:1;11159;11152:12;11130:36;11200:56;11248:7;11237:8;11233:2;11229:17;11200:56;:::i;:::-;11195:2;11186:7;11182:16;11175:82;;11303:3;11299:2;11295:12;11282:26;11333:2;11323:8;11320:16;11317:36;;;11349:1;11346;11339:12;11317:36;11380:8;11376:2;11372:17;11362:27;;;11427:7;11420:4;11416:2;11412:13;11408:27;11398:55;;11449:1;11446;11439:12;11398:55;11485:2;11472:16;11507:2;11503;11500:10;11497:36;;;11513:18;;:::i;:::-;11555:53;11598:2;11579:13;;-1:-1:-1;;11575:27:29;11571:36;;11555:53;:::i;:::-;11542:66;;11631:2;11624:5;11617:17;11671:7;11666:2;11661;11657;11653:11;11649:20;11646:33;11643:53;;;11692:1;11689;11682:12;11643:53;11747:2;11742;11738;11734:11;11729:2;11722:5;11718:14;11705:45;11791:1;11786:2;11781;11774:5;11770:14;11766:23;11759:34;;11828:5;11822:3;11813:7;11809:17;11802:32;11853:7;11843:17;;;;;;10222:1644;;;;;:::o;11871:380::-;11950:1;11946:12;;;;11993;;;12014:61;;12068:4;12060:6;12056:17;12046:27;;12014:61;12121:2;12113:6;12110:14;12090:18;12087:38;12084:161;;12167:10;12162:3;12158:20;12155:1;12148:31;12202:4;12199:1;12192:15;12230:4;12227:1;12220:15;12084:161;;11871:380;;;:::o;12256:222::-;12321:9;;;12342:10;;;12339:133;;;12394:10;12389:3;12385:20;12382:1;12375:31;12429:4;12426:1;12419:15;12457:4;12454:1;12447:15;13703:326;13796:5;13819:1;13829:194;13843:4;13840:1;13837:11;13829:194;;;13902:13;;13890:26;;13939:4;13963:12;;;;13998:15;;;;13863:1;13856:9;13829:194;;14171:772;14221:3;14262:5;14256:12;14291:36;14317:9;14291:36;:::i;:::-;14336:19;;;14374:4;14397:1;14414:18;;;14441:146;;;;14601:1;14596:341;;;;14407:530;;14441:146;-1:-1:-1;;14483:24:29;;14469:12;;;14462:46;14555:14;;14548:22;14545:1;14541:30;14532:40;;14528:49;;;-1:-1:-1;14441:146:29;;14596:341;14627:5;14624:1;14617:16;14674:2;14671:1;14661:16;14699:1;14713:174;14727:6;14724:1;14721:13;14713:174;;;14814:14;;14796:11;;;14792:20;;14785:44;14857:16;;;;14742:10;;14713:174;;;14911:11;;14907:20;;;-1:-1:-1;;14407:530:29;;;;;;14171:772;;;;:::o;14948:1995::-;15445:4;15474:3;15504:2;15493:9;15486:21;15530:56;15582:2;15571:9;15567:18;15559:6;15530:56;:::i;:::-;15516:70;;15605:2;15616:52;15664:2;15653:9;15649:18;15641:6;15616:52;:::i;:::-;15703:2;15692:9;15688:18;15748:6;15772:1;15782:187;15796:4;15793:1;15790:11;15782:187;;;15843:44;15883:3;15874:6;15868:13;15843:44;:::i;:::-;15916:4;15907:14;;;;;15944:15;;;;15816:1;15809:9;15782:187;;;15786:3;;;15978:53;16026:3;16015:9;16011:19;16003:6;15978:53;:::i;:::-;16068:22;;;16062:3;16047:19;;16040:51;16155:13;;16140:29;;16188:1;16228:15;;;16222:22;16205:15;;;16198:47;16298:4;16286:17;;16280:24;16273:4;16261:17;;16254:51;16126:4;16379:2;16367:15;;16360:29;;;16346:4;16334:17;;16440:19;;16114:17;;;16468:22;;;-1:-1:-1;16533:23:29;;;16581:16;;;;16188:1;16520:3;16508:16;;;16627:188;16643:6;16638:3;16635:15;16627:188;;;16711:15;;16697:30;;16788:17;;;;16660:12;;;;16749:14;;;;16627:188;;;16631:3;16861:6;16854:5;16850:18;16843:4;16835:6;16831:17;16824:45;16886:51;16931:5;16924:4;16916:6;16912:17;16886:51;:::i;:::-;16878:59;14948:1995;-1:-1:-1;;;;;;;;;;;;;14948:1995:29:o;16948:277::-;17015:6;17068:2;17056:9;17047:7;17043:23;17039:32;17036:52;;;17084:1;17081;17074:12;17036:52;17116:9;17110:16;17169:5;17162:13;17155:21;17148:5;17145:32;17135:60;;17191:1;17188;17181:12;17993:545;18095:2;18090:3;18087:11;18084:448;;;18131:1;18156:5;18152:2;18145:17;18201:4;18197:2;18187:19;18271:2;18259:10;18255:19;18252:1;18248:27;18242:4;18238:38;18307:4;18295:10;18292:20;18289:47;;;-1:-1:-1;18330:4:29;18289:47;18385:2;18380:3;18376:12;18373:1;18369:20;18363:4;18359:31;18349:41;;18440:82;18458:2;18451:5;18448:13;18440:82;;;18503:17;;;18484:1;18473:13;18440:82;;;18444:3;;;17993:545;;;:::o;18714:1363::-;18840:3;18834:10;-1:-1:-1;;;;;18859:6:29;18856:30;18853:56;;;18889:18;;:::i;:::-;18918:97;19008:6;18968:38;19000:4;18994:11;18968:38;:::i;:::-;18962:4;18918:97;:::i;:::-;19070:4;;19134:2;19123:14;;19151:1;19146:674;;;;19864:1;19881:6;19878:89;;;-1:-1:-1;19933:19:29;;;19927:26;19878:89;-1:-1:-1;;18671:1:29;18667:11;;;18663:24;18659:29;18649:40;18695:1;18691:11;;;18646:57;19980:81;;19116:955;;19146:674;14118:1;14111:14;;;14155:4;14142:18;;-1:-1:-1;;19182:20:29;;;19311:236;19325:7;19322:1;19319:14;19311:236;;;19414:19;;;19408:26;19393:42;;19506:27;;;;19474:1;19462:14;;;;19341:19;;19311:236;;;19315:3;19575:6;19566:7;19563:19;19560:201;;;19636:19;;;19630:26;-1:-1:-1;;19719:1:29;19715:14;;;19731:3;19711:24;19707:37;19703:42;19688:58;19673:74;;19560:201;-1:-1:-1;;;;;19807:1:29;19791:14;;;19787:22;19774:36;;-1:-1:-1;18714:1363:29:o;22826:184::-;22896:6;22949:2;22937:9;22928:7;22924:23;22920:32;22917:52;;;22965:1;22962;22955:12;22917:52;-1:-1:-1;22988:16:29;;22826:184;-1:-1:-1;22826:184:29:o;23015:127::-;23076:10;23071:3;23067:20;23064:1;23057:31;23107:4;23104:1;23097:15;23131:4;23128:1;23121:15",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID()": "7042f36b",
    "TRANSFER_REQUEST_ID()": "63ec508f",
    "addressToId(address)": "cb0e0d7d",
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "getSupportedRequests()": "37ba9523",
    "getZKPRequest(uint64)": "c76d0845",
    "idToAddress(uint256)": "2a2d0c47",
    "increaseAllowance(address,uint256)": "39509351",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "proofs(address,uint64)": "b45c0fdf",
    "renounceOwnership()": "715018a6",
    "requestQueries(uint64)": "96bf4741",
    "requestValidators(uint64)": "a8723114",
    "setZKPRequest(uint64,address,(uint256,uint256,uint256,uint256[],string))": "fee207e6",
    "submitZKPResponse(uint64,uint256[],uint256[2],uint256[2][2],uint256[2])": "b68967e2",
    "supportedRequests(uint256)": "f1435326",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_AMOUNT_FOR_AIRDROP_PER_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_REQUEST_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedRequests\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"arr\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"getZKPRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"schema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operator\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"circuitId\",\"type\":\"string\"}],\"internalType\":\"struct ICircuitValidator.CircuitQuery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"requestQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"schema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operator\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"circuitId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"requestValidators\",\"outputs\":[{\"internalType\":\"contract ICircuitValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"contract ICircuitValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"schema\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operator\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"circuitId\",\"type\":\"string\"}],\"internalType\":\"struct ICircuitValidator.CircuitQuery\",\"name\":\"query\",\"type\":\"tuple\"}],\"name\":\"setZKPRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"name\":\"submitZKPResponse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC20Verifier.sol\":\"ERC20Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a\",\"dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/solidity-bytes-utils/contracts/BytesLib.sol\":{\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014\",\"dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn\"]},\"src/ERC20Verifier.sol\":{\"keccak256\":\"0x44f6e3c3f0b0941387dff4c2111d6b1a6b51a52986b19afbc9ac4cf69ad72a6f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c371c2da4dbf515ee4e53d594f44ab87d56674ba9a290c09e7d2e90e2cdd18c8\",\"dweb:/ipfs/Qmaf8phT6UMaDAGDqgYZ7fsdaxWry1xqobuexgxS8nRoVc\"]},\"src/interfaces/ICircuitValidator.sol\":{\"keccak256\":\"0x1189e1b8d853a8613390754bcb6c9447090d196b9efe96d0c9f98e598f416af3\",\"urls\":[\"bzz-raw://2b52cc3f07e43b7c327e61926febeceb382e0349ef51800b0f72f47adc96b075\",\"dweb:/ipfs/Qmdk7MWhqN5TSdwGnJUQg12a14gLVs8gzykEoMNo9XZit5\"]},\"src/interfaces/IZKPVerifier.sol\":{\"keccak256\":\"0x81432204b8ca593d352e062ecc500e732139dfe162e740dd3985b791fcdf0a7d\",\"urls\":[\"bzz-raw://866df75609ae2690d86768a91bee7c46a4d422f1f2dd24e379ecff20d53cdb87\",\"dweb:/ipfs/QmVF3XjH2DVJkBJhfV4KmyJsWrGUFuWxaVDk6ZaJCMMUSd\"]},\"src/lib/GenesisUtils.sol\":{\"keccak256\":\"0x067daa2a565d116798909a8421d4abd67695df39be18d340d4274172153e83ba\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://6702fdc069a9fa9c33091aa912529f244ac6e56bb139f3c22c7c8e03b5944b32\",\"dweb:/ipfs/Qmf2czU4Zbpr5qJ8ab9iEEfFBrLuhWat3WPdjCeVuSMH1f\"]},\"src/verifiers/ZKPVerifier.sol\":{\"keccak256\":\"0xfc554f68a19023fa30c183f2d4eb70b95998c845ccbae44ba2d4e7aebc5c3f06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa1a7422f5a19da4ddbd916d08800c8c51eeb9cf85fd1ce8450c9555ed9395d9\",\"dweb:/ipfs/QmUMUp7ypQeEMCogJq3tEn3TJ1m9CRw8W6cyGAHLUJMAeg\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "name_",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol_",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "TRANSFER_REQUEST_ID",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "addressToId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupportedRequests",
          "outputs": [
            {
              "internalType": "uint64[]",
              "name": "arr",
              "type": "uint64[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "requestId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getZKPRequest",
          "outputs": [
            {
              "internalType": "struct ICircuitValidator.CircuitQuery",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "schema",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "slotIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "operator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "value",
                  "type": "uint256[]"
                },
                {
                  "internalType": "string",
                  "name": "circuitId",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "idToAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "proofs",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "requestQueries",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "schema",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slotIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "operator",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "circuitId",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "requestValidators",
          "outputs": [
            {
              "internalType": "contract ICircuitValidator",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "requestId",
              "type": "uint64"
            },
            {
              "internalType": "contract ICircuitValidator",
              "name": "validator",
              "type": "address"
            },
            {
              "internalType": "struct ICircuitValidator.CircuitQuery",
              "name": "query",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "schema",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "slotIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "operator",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "value",
                  "type": "uint256[]"
                },
                {
                  "internalType": "string",
                  "name": "circuitId",
                  "type": "string"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setZKPRequest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "requestId",
              "type": "uint64"
            },
            {
              "internalType": "uint256[]",
              "name": "inputs",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[2]",
              "name": "a",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "b",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "c",
              "type": "uint256[2]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "submitZKPResponse",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportedRequests",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":solidity-bytes-utils/=lib/solidity-bytes-utils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/ERC20Verifier.sol": "ERC20Verifier"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d",
        "urls": [
          "bzz-raw://b394e20d57877a825c24c1841e219d6ab1e41decec060ea935422ac9b7a25f8a",
          "dweb:/ipfs/QmVTaGCMR4Gi9w1LUVVcjEJHrHF2qcr1avFkLtsLD6sEAr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "lib/solidity-bytes-utils/contracts/BytesLib.sol": {
        "keccak256": "0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29",
        "urls": [
          "bzz-raw://ca16cef8b94f3ac75d376489a668618f6c4595a906b939d674a883f4bf426014",
          "dweb:/ipfs/QmceGU7qhyFLSejaj6i4dEtMzXDCSF3aYDtW1UeKjXQaRn"
        ],
        "license": "Unlicense"
      },
      "src/ERC20Verifier.sol": {
        "keccak256": "0x44f6e3c3f0b0941387dff4c2111d6b1a6b51a52986b19afbc9ac4cf69ad72a6f",
        "urls": [
          "bzz-raw://c371c2da4dbf515ee4e53d594f44ab87d56674ba9a290c09e7d2e90e2cdd18c8",
          "dweb:/ipfs/Qmaf8phT6UMaDAGDqgYZ7fsdaxWry1xqobuexgxS8nRoVc"
        ],
        "license": "MIT"
      },
      "src/interfaces/ICircuitValidator.sol": {
        "keccak256": "0x1189e1b8d853a8613390754bcb6c9447090d196b9efe96d0c9f98e598f416af3",
        "urls": [
          "bzz-raw://2b52cc3f07e43b7c327e61926febeceb382e0349ef51800b0f72f47adc96b075",
          "dweb:/ipfs/Qmdk7MWhqN5TSdwGnJUQg12a14gLVs8gzykEoMNo9XZit5"
        ],
        "license": null
      },
      "src/interfaces/IZKPVerifier.sol": {
        "keccak256": "0x81432204b8ca593d352e062ecc500e732139dfe162e740dd3985b791fcdf0a7d",
        "urls": [
          "bzz-raw://866df75609ae2690d86768a91bee7c46a4d422f1f2dd24e379ecff20d53cdb87",
          "dweb:/ipfs/QmVF3XjH2DVJkBJhfV4KmyJsWrGUFuWxaVDk6ZaJCMMUSd"
        ],
        "license": null
      },
      "src/lib/GenesisUtils.sol": {
        "keccak256": "0x067daa2a565d116798909a8421d4abd67695df39be18d340d4274172153e83ba",
        "urls": [
          "bzz-raw://6702fdc069a9fa9c33091aa912529f244ac6e56bb139f3c22c7c8e03b5944b32",
          "dweb:/ipfs/Qmf2czU4Zbpr5qJ8ab9iEEfFBrLuhWat3WPdjCeVuSMH1f"
        ],
        "license": "GPL-3.0"
      },
      "src/verifiers/ZKPVerifier.sol": {
        "keccak256": "0xfc554f68a19023fa30c183f2d4eb70b95998c845ccbae44ba2d4e7aebc5c3f06",
        "urls": [
          "bzz-raw://fa1a7422f5a19da4ddbd916d08800c8c51eeb9cf85fd1ce8450c9555ed9395d9",
          "dweb:/ipfs/QmUMUp7ypQeEMCogJq3tEn3TJ1m9CRw8W6cyGAHLUJMAeg"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/ERC20Verifier.sol",
    "id": 25208,
    "exportedSymbols": {
      "BytesLib": [
        24880
      ],
      "Context": [
        24547
      ],
      "ERC20": [
        24422
      ],
      "ERC20Verifier": [
        25207
      ],
      "GenesisUtils": [
        25763
      ],
      "ICircuitValidator": [
        25262
      ],
      "IERC20": [
        24500
      ],
      "IERC20Metadata": [
        24525
      ],
      "IZKPVerifier": [
        25363
      ],
      "Ownable": [
        23835
      ],
      "ZKPVerifier": [
        26374
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2019:20",
    "nodes": [
      {
        "id": 25043,
        "nodeType": "PragmaDirective",
        "src": "32:23:20",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 25044,
        "nodeType": "ImportDirective",
        "src": "57:55:20",
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25208,
        "sourceUnit": 24423,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25045,
        "nodeType": "ImportDirective",
        "src": "113:32:20",
        "absolutePath": "src/lib/GenesisUtils.sol",
        "file": "./lib/GenesisUtils.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25208,
        "sourceUnit": 25764,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25046,
        "nodeType": "ImportDirective",
        "src": "146:44:20",
        "absolutePath": "src/interfaces/ICircuitValidator.sol",
        "file": "./interfaces/ICircuitValidator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25208,
        "sourceUnit": 25263,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25047,
        "nodeType": "ImportDirective",
        "src": "191:37:20",
        "absolutePath": "src/verifiers/ZKPVerifier.sol",
        "file": "./verifiers/ZKPVerifier.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 25208,
        "sourceUnit": 26375,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 25207,
        "nodeType": "ContractDefinition",
        "src": "230:1821:20",
        "nodes": [
          {
            "id": 25054,
            "nodeType": "VariableDeclaration",
            "src": "282:46:20",
            "constant": true,
            "functionSelector": "63ec508f",
            "mutability": "constant",
            "name": "TRANSFER_REQUEST_ID",
            "nameLocation": "305:19:20",
            "scope": 25207,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint64",
              "typeString": "uint64"
            },
            "typeName": {
              "id": 25052,
              "name": "uint64",
              "nodeType": "ElementaryTypeName",
              "src": "282:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_uint64",
                "typeString": "uint64"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 25053,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "327:1:20",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "id": 25058,
            "nodeType": "VariableDeclaration",
            "src": "335:46:20",
            "constant": false,
            "functionSelector": "2a2d0c47",
            "mutability": "mutable",
            "name": "idToAddress",
            "nameLocation": "370:11:20",
            "scope": 25207,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 25057,
              "keyType": {
                "id": 25055,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "343:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "335:27:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 25056,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "354:7:20",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 25062,
            "nodeType": "VariableDeclaration",
            "src": "387:46:20",
            "constant": false,
            "functionSelector": "cb0e0d7d",
            "mutability": "mutable",
            "name": "addressToId",
            "nameLocation": "422:11:20",
            "scope": 25207,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 25061,
              "keyType": {
                "id": 25059,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "395:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "387:27:20",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 25060,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "406:7:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 25073,
            "nodeType": "VariableDeclaration",
            "src": "440:73:20",
            "constant": false,
            "functionSelector": "7042f36b",
            "mutability": "mutable",
            "name": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
            "nameLocation": "455:31:20",
            "scope": 25207,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 25063,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "440:7:20",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 25072,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "35",
                "id": 25064,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "489:1:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_5_by_1",
                  "typeString": "int_const 5"
                },
                "value": "5"
              },
              "nodeType": "BinaryOperation",
              "operator": "*",
              "rightExpression": {
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 25071,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "hexValue": "3130",
                  "id": 25065,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "493:2:20",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_10_by_1",
                    "typeString": "int_const 10"
                  },
                  "value": "10"
                },
                "nodeType": "BinaryOperation",
                "operator": "**",
                "rightExpression": {
                  "arguments": [
                    {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 25068,
                        "name": "decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 23910,
                        "src": "502:8:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                          "typeString": "function () view returns (uint8)"
                        }
                      },
                      "id": 25069,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "502:10:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    ],
                    "id": 25067,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "497:4:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_uint256_$",
                      "typeString": "type(uint256)"
                    },
                    "typeName": {
                      "id": 25066,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "497:4:20",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 25070,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "nameLocations": [],
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "497:16:20",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "493:20:20",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "489:24:20",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 25085,
            "nodeType": "FunctionDefinition",
            "src": "520:92:20",
            "body": {
              "id": 25084,
              "nodeType": "Block",
              "src": "610:2:20",
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 25080,
                    "name": "name_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25075,
                    "src": "590:5:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 25081,
                    "name": "symbol_",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25077,
                    "src": "597:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 25082,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 25079,
                  "name": "ERC20",
                  "nameLocations": [
                    "584:5:20"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 24422,
                  "src": "584:5:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "584:21:20"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 25078,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25075,
                  "mutability": "mutable",
                  "name": "name_",
                  "nameLocation": "546:5:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25085,
                  "src": "532:19:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25074,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "532:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25077,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nameLocation": "567:7:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25085,
                  "src": "553:21:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25076,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "553:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "531:44:20"
            },
            "returnParameters": {
              "id": 25083,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "610:0:20"
            },
            "scope": 25207,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 25117,
            "nodeType": "FunctionDefinition",
            "src": "622:481:20",
            "body": {
              "id": 25116,
              "nodeType": "Block",
              "src": "781:322:20",
              "statements": [
                {
                  "assignments": [
                    25098
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 25098,
                      "mutability": "mutable",
                      "name": "addr",
                      "nameLocation": "878:4:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 25116,
                      "src": "870:12:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 25097,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "870:7:20",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 25107,
                  "initialValue": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 25101,
                          "name": "inputs",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25090,
                          "src": "927:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 25105,
                        "indexExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 25102,
                              "name": "validator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25093,
                              "src": "934:9:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                                "typeString": "contract ICircuitValidator"
                              }
                            },
                            "id": 25103,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "944:22:20",
                            "memberName": "getChallengeInputIndex",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 25256,
                            "src": "934:32:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_pure$__$returns$_t_uint256_$",
                              "typeString": "function () pure external returns (uint256)"
                            }
                          },
                          "id": 25104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "934:34:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "927:42:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 25099,
                        "name": "GenesisUtils",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25763,
                        "src": "885:12:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_GenesisUtils_$25763_$",
                          "typeString": "type(library GenesisUtils)"
                        }
                      },
                      "id": 25100,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "898:15:20",
                      "memberName": "int256ToAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25762,
                      "src": "885:28:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) pure returns (address)"
                      }
                    },
                    "id": 25106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "885:94:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "870:109:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 25112,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 25109,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24537,
                            "src": "1010:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 25110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1010:12:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 25111,
                          "name": "addr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25098,
                          "src": "1026:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1010:20:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6164647265737320696e2070726f6f66206973206e6f7420612073656e6465722061646472657373",
                        "id": 25113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1044:42:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_253cb6ac95c90afe726d0e84299219411a6fb56302f5b7684abd252802ccad60",
                          "typeString": "literal_string \"address in proof is not a sender address\""
                        },
                        "value": "address in proof is not a sender address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_253cb6ac95c90afe726d0e84299219411a6fb56302f5b7684abd252802ccad60",
                          "typeString": "literal_string \"address in proof is not a sender address\""
                        }
                      ],
                      "id": 25108,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "989:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 25114,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "989:107:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25115,
                  "nodeType": "ExpressionStatement",
                  "src": "989:107:20"
                }
              ]
            },
            "baseFunctions": [
              26360
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeProofSubmit",
            "nameLocation": "631:18:20",
            "overrides": {
              "id": 25095,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "772:8:20"
            },
            "parameters": {
              "id": 25094,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25087,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25117,
                  "src": "659:6:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 25086,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "659:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25090,
                  "mutability": "mutable",
                  "name": "inputs",
                  "nameLocation": "708:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25117,
                  "src": "691:23:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 25088,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "691:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 25089,
                    "nodeType": "ArrayTypeName",
                    "src": "691:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25093,
                  "mutability": "mutable",
                  "name": "validator",
                  "nameLocation": "742:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25117,
                  "src": "724:27:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                    "typeString": "contract ICircuitValidator"
                  },
                  "typeName": {
                    "id": 25092,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25091,
                      "name": "ICircuitValidator",
                      "nameLocations": [
                        "724:17:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 25262,
                      "src": "724:17:20"
                    },
                    "referencedDeclaration": 25262,
                    "src": "724:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                      "typeString": "contract ICircuitValidator"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "649:108:20"
            },
            "returnParameters": {
              "id": 25096,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "781:0:20"
            },
            "scope": 25207,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 25184,
            "nodeType": "FunctionDefinition",
            "src": "1109:630:20",
            "body": {
              "id": 25183,
              "nodeType": "Block",
              "src": "1256:483:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 25139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 25132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 25130,
                            "name": "requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25119,
                            "src": "1287:9:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 25131,
                            "name": "TRANSFER_REQUEST_ID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25054,
                            "src": "1300:19:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "1287:32:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 25138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 25133,
                              "name": "addressToId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25062,
                              "src": "1323:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 25136,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 25134,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24537,
                                "src": "1335:10:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 25135,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1335:12:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1323:25:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 25137,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1352:1:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1323:30:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1287:66:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "70726f6f662063616e206e6f74206265207375626d6974746564206d6f7265207468616e206f6e6365",
                        "id": 25140,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1367:43:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9c5636987605ef00ebb2eac665411909dea2229752722af9de06c52a928a2cfa",
                          "typeString": "literal_string \"proof can not be submitted more than once\""
                        },
                        "value": "proof can not be submitted more than once"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9c5636987605ef00ebb2eac665411909dea2229752722af9de06c52a928a2cfa",
                          "typeString": "literal_string \"proof can not be submitted more than once\""
                        }
                      ],
                      "id": 25129,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1266:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 25141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1266:154:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25142,
                  "nodeType": "ExpressionStatement",
                  "src": "1266:154:20"
                },
                {
                  "assignments": [
                    25144
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 25144,
                      "mutability": "mutable",
                      "name": "id",
                      "nameLocation": "1439:2:20",
                      "nodeType": "VariableDeclaration",
                      "scope": 25183,
                      "src": "1431:10:20",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 25143,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1431:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 25150,
                  "initialValue": {
                    "baseExpression": {
                      "id": 25145,
                      "name": "inputs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25122,
                      "src": "1444:6:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "id": 25149,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 25146,
                          "name": "validator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25125,
                          "src": "1451:9:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                            "typeString": "contract ICircuitValidator"
                          }
                        },
                        "id": 25147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1461:22:20",
                        "memberName": "getChallengeInputIndex",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 25256,
                        "src": "1451:32:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_pure$__$returns$_t_uint256_$",
                          "typeString": "function () pure external returns (uint256)"
                        }
                      },
                      "id": 25148,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1451:34:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1444:42:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1431:55:20"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 25158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "baseExpression": {
                        "id": 25151,
                        "name": "idToAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25058,
                        "src": "1531:11:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 25153,
                      "indexExpression": {
                        "id": 25152,
                        "name": "id",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25144,
                        "src": "1543:2:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "1531:15:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 25156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1558:1:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 25155,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1550:7:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 25154,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1550:7:20",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 25157,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1550:10:20",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1531:29:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 25182,
                  "nodeType": "IfStatement",
                  "src": "1527:206:20",
                  "trueBody": {
                    "id": 25181,
                    "nodeType": "Block",
                    "src": "1562:171:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 25162,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24537,
                                "src": "1588:10:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 25163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1588:12:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 25164,
                              "name": "TOKEN_AMOUNT_FOR_AIRDROP_PER_ID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25073,
                              "src": "1602:31:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 25159,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "1576:5:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_ERC20Verifier_$25207_$",
                                "typeString": "type(contract super ERC20Verifier)"
                              }
                            },
                            "id": 25161,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1582:5:20",
                            "memberName": "_mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 24239,
                            "src": "1576:11:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 25165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1576:58:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 25166,
                        "nodeType": "ExpressionStatement",
                        "src": "1576:58:20"
                      },
                      {
                        "expression": {
                          "id": 25172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 25167,
                              "name": "addressToId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25062,
                              "src": "1648:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 25170,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 25168,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24537,
                                "src": "1660:10:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 25169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1660:12:20",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1648:25:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 25171,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25144,
                            "src": "1676:2:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1648:30:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 25173,
                        "nodeType": "ExpressionStatement",
                        "src": "1648:30:20"
                      },
                      {
                        "expression": {
                          "id": 25179,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 25174,
                              "name": "idToAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25058,
                              "src": "1692:11:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                "typeString": "mapping(uint256 => address)"
                              }
                            },
                            "id": 25176,
                            "indexExpression": {
                              "id": 25175,
                              "name": "id",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25144,
                              "src": "1704:2:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1692:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 25177,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24537,
                              "src": "1710:10:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 25178,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1710:12:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1692:30:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 25180,
                        "nodeType": "ExpressionStatement",
                        "src": "1692:30:20"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              26373
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterProofSubmit",
            "nameLocation": "1118:17:20",
            "overrides": {
              "id": 25127,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1247:8:20"
            },
            "parameters": {
              "id": 25126,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25119,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "1152:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25184,
                  "src": "1145:16:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 25118,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1145:6:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25122,
                  "mutability": "mutable",
                  "name": "inputs",
                  "nameLocation": "1188:6:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25184,
                  "src": "1171:23:20",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 25120,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1171:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 25121,
                    "nodeType": "ArrayTypeName",
                    "src": "1171:9:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25125,
                  "mutability": "mutable",
                  "name": "validator",
                  "nameLocation": "1222:9:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25184,
                  "src": "1204:27:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                    "typeString": "contract ICircuitValidator"
                  },
                  "typeName": {
                    "id": 25124,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 25123,
                      "name": "ICircuitValidator",
                      "nameLocations": [
                        "1204:17:20"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 25262,
                      "src": "1204:17:20"
                    },
                    "referencedDeclaration": 25262,
                    "src": "1204:17:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ICircuitValidator_$25262",
                      "typeString": "contract ICircuitValidator"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1135:102:20"
            },
            "returnParameters": {
              "id": 25128,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1256:0:20"
            },
            "scope": 25207,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 25206,
            "nodeType": "FunctionDefinition",
            "src": "1745:304:20",
            "body": {
              "id": 25205,
              "nodeType": "Block",
              "src": "1882:167:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 25201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 25195,
                              "name": "proofs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26127,
                              "src": "1913:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint64_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint64 => bool))"
                              }
                            },
                            "id": 25197,
                            "indexExpression": {
                              "id": 25196,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25188,
                              "src": "1920:2:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1913:10:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint64_$_t_bool_$",
                              "typeString": "mapping(uint64 => bool)"
                            }
                          },
                          "id": 25199,
                          "indexExpression": {
                            "id": 25198,
                            "name": "TRANSFER_REQUEST_ID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25054,
                            "src": "1924:19:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1913:31:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 25200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1948:4:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1913:39:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6f6e6c79206964656e7469746965732077686f2070726f76696465642070726f6f662061726520616c6c6f77656420746f207265636569766520746f6b656e73",
                        "id": 25202,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1966:66:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_87c9156cf14e67d20455c977d0a28d0cfaec087cd8ab6f95a315e30a18445003",
                          "typeString": "literal_string \"only identities who provided proof are allowed to receive tokens\""
                        },
                        "value": "only identities who provided proof are allowed to receive tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_87c9156cf14e67d20455c977d0a28d0cfaec087cd8ab6f95a315e30a18445003",
                          "typeString": "literal_string \"only identities who provided proof are allowed to receive tokens\""
                        }
                      ],
                      "id": 25194,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1892:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 25203,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1892:150:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25204,
                  "nodeType": "ExpressionStatement",
                  "src": "1892:150:20"
                }
              ]
            },
            "baseFunctions": [
              24410
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "1754:20:20",
            "overrides": {
              "id": 25192,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1873:8:20"
            },
            "parameters": {
              "id": 25191,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25186,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25206,
                  "src": "1784:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25185,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1784:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25188,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1820:2:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 25206,
                  "src": "1812:10:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25187,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1812:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25190,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25206,
                  "src": "1832:7:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 25189,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1832:7:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1774:84:20"
            },
            "returnParameters": {
              "id": 25193,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1882:0:20"
            },
            "scope": 25207,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 25048,
              "name": "ERC20",
              "nameLocations": [
                "256:5:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24422,
              "src": "256:5:20"
            },
            "id": 25049,
            "nodeType": "InheritanceSpecifier",
            "src": "256:5:20"
          },
          {
            "baseName": {
              "id": 25050,
              "name": "ZKPVerifier",
              "nameLocations": [
                "263:11:20"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26374,
              "src": "263:11:20"
            },
            "id": 25051,
            "nodeType": "InheritanceSpecifier",
            "src": "263:11:20"
          }
        ],
        "canonicalName": "ERC20Verifier",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          25207,
          26374,
          23835,
          24422,
          24525,
          24500,
          24547,
          25363
        ],
        "name": "ERC20Verifier",
        "nameLocation": "239:13:20",
        "scope": 25208,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 20
}